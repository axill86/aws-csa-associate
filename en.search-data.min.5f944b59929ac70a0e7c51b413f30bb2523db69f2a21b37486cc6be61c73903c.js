'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/aws-csa-associate/docs/iam/','title':"Identity and Access Management",'content':"Identity and Access Management IAM Essentials IAM controls access to AWS services via policies, that can be attached to users, groups and roles.\nARN (Amazon Resource Name) Each resource at AWS has unique identifier named ARN (Amazon Resource Name), which has following format\narn:partition:service:region:account_id:[resource|resourecetype/resource|resourcetype/resource/qualifier|resourcetype/resource:qualifier|resourcetype:resource:qualifier]  partition = aws or aws-cn service = AWS service (s3, ec2, rds, dynamodb) region = region code: us-east-1, us-west-2\nAWS ARN documentation\nWildcards are supported arn:aws:s3:::my_corporate_bucket/*\nCredentials  Username/password - longterm credential which can be used to access console Access keys - longterm credentials, which can be used with AWS CLI Short term - used by roles  NB: By default IAM identity does not have permissions to do anything (Deny by default)\nIAM policies IAM Policies AWS doc\nIAM policy is a document, which can be attached to Identity or Resource\nIAM Policy Document\n Version Statement(s)  SID (id of policy) Effect (Allow or Deny) Action - list of Actions (wildcards are supported) Resource - ARN Conditions (?)    Example\n{ \u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;, \u0026quot;Statement\u0026quot;: [ { \u0026quot;Sid\u0026quot;: \u0026quot;FirstStatement\u0026quot;, \u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;, \u0026quot;Action\u0026quot;: [\u0026quot;iam:ChangePassword\u0026quot;], \u0026quot;Resource\u0026quot;: \u0026quot;*\u0026quot; }, { \u0026quot;Sid\u0026quot;: \u0026quot;SecondStatement\u0026quot;, \u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;, \u0026quot;Action\u0026quot;: \u0026quot;s3:ListAllMyBuckets\u0026quot;, \u0026quot;Resource\u0026quot;: \u0026quot;*\u0026quot; }, { \u0026quot;Sid\u0026quot;: \u0026quot;ThirdStatement\u0026quot;, \u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;, \u0026quot;Action\u0026quot;: [ \u0026quot;s3:List*\u0026quot;, \u0026quot;s3:Get*\u0026quot; ], \u0026quot;Resource\u0026quot;: [ \u0026quot;arn:aws:s3:::confidential-data\u0026quot;, \u0026quot;arn:aws:s3:::confidential-data/*\u0026quot; ], \u0026quot;Condition\u0026quot;: {\u0026quot;Bool\u0026quot;: {\u0026quot;aws:MultiFactorAuthPresent\u0026quot;: \u0026quot;true\u0026quot;}} } ] } Types of IAM Policies  Inline - attached directly to user/role/group Managed  AWS Managed Customer Managed    NB Exam Tips  Implicit default Deny is applied by default Explicit Deny overrides anything All policies are merged during verification (user, group, role)  IAM Users AWS IAM Users doc IAM Users are type of IAM identity suitable for long-term access for known entity (human, service, app)\nAuthentication Principals authenticate to IAM with username/password or Access Keys Iam user has ARN assigned. Also, user can have tags (like many other AWS resources)\nLimits  Hard Limit - 5000 IAM susers per account IAM user can be member of up to 10 groups Inline policies size should not exceen 2048 character 1 MFA pper user 2 Access key  IAM Groups AWS IAM groups IAM Group is a collections of IAM users, which allow easier administration over users. Groups can not be principle in a policy, so they can't be used in Resource policy Group can be associated with managed policy or can have inline policy.\nExam Facts  Groups are admin feature to group users User can be member of multiple groups (up to 10) Groups can not be referenced from from resource policies Groups have no credentials  Access Keys AWS CREDENTIAL\n Access Key Id - public part of the key Secret Access Key private part  Can not be restored Can not be changed   There are two keys per user max User keys don't expire  IAM Roles IAM ROLES AWS DOC\nIAM role can have two types of policies\n Trust Policy IAM Permission Policy  STS (Simple token Service) creates temporary credentials when identity Assumes role\nRoles Example scenarios  Emergency resource access for a person, who usually does not have that access For Service to perform action. Following services can do sts:AssumeRole:  IAM User AWS Service External Account Web identities   Cross-acount access Web Identity Federation  "});index.add({'id':1,'href':'/aws-csa-associate/docs/multi-account/','title':"Multi-Account Management and Organizations",'content':"Multi-Account Management and Organizations AWS Organizations AWS Organizations is a service for managing multiple consolidated accounts, which belongs to the same organization. It also allows to perform consolidated billing, when bills from all organizaiton collected into single account. Organization accounts can be grouped into organizational units.\n  graph TD; root[Root Account] ou[Organizational Unit] ou1[Organizational Unit] ou3[Organizational Unit] acc[Account] acc1[Account] acc2[Account] acc3[Account] root -- ou ou -- acc ou -- acc1 root -- ou1 ou1 -- acc2 ou1 -- acc3 ou1 -- ou3 Service Control Policies are used for limiting account usage. Those can be appliced to OU or Accounts\n AWS Documentation  Role Switching Role Switching is a methond of accessing one account from another using set of credentials.\n A role in Account B trutsts Account A An identity in Account A can assume role in Account B An identity from Account A can operate in Account B with this role  "});index.add({'id':2,'href':'/aws-csa-associate/docs/architecture101/','title':"Architecture 101",'content':"Architecture 101 Access Management Basics  Principal a person or service that can make authenticated or anonymous request to perform an action on a system Authentication process of identification (with username/password, keys) Identity Objects which require authentication and are authorized to access resource Authorization Process of checking and allowing (or denying acces for identity)  Shared responsibility model Customer Customer is responsible for security in the cloud\n Customer data Platform, application, access management, encryption (at rest/in transit) OS, network, firewall configuration   AWS AWS is responsible for security off the cloud\n Software DB, Network, compute, storage Hardware Regions, AZs, Edge locations    Service Models  IaaS - Infrastructue as a service PaaS - Platform as a service SaaS - Software as a service     IaaS PaaS SaaS     Data Data Data   Application Application Application   Runtime Runtime Runtime   OS OS OS   Virtualization Virtualization Virtualization   Hosts/Servers Hosts/Servers Hosts/Servers   Networkind/Storage Networkind/Storage Networkind/Storage   Data Center Data Center Data Center    Hig Availability vs Fault Tolerance  HA is ability to recover quickly in case of failure  Example Car (in case if wheel blows up it's fine to stop and change wheel)  graph LR Failure -- Terminate Terminate -- Recover    FT System designed to operate through the failure  Example Plane (in case of one engine failure, plane usually continues flight) graph LR LB[Load Balancer] LB -- A[\"Instance (failed)\"] LB -- B[Instance] LB -- C[Instance] style A fill:#f9f     Disaster recovery  Recovery Point Objective (RPO) How much can company loose (in time). The maximum time between a table and backup Tecovery Time Objective (RTO) The maximum amount of time you can recover.  Scaling Architecture  Vertical Additional resources (CPU, Memory, etc) Horizontal Add additional smaller instances. Requires application support  Tiered Architecture  Presentation Logic Data  Encryption Can be either In Transit or At rest Can be Symmetric and Assimetric\nArchitecture Odds and Ends  Cost effective Secure Application session state Undifferiented heavy lifting  "});index.add({'id':3,'href':'/aws-csa-associate/docs/aws-architecture-101/','title':"AWS Architecture 101",'content':"AWS Architecture 101 Accounts  AWS accounts are independent by default Consolidated billing for multiple accounts can be set up  AWS Physical and Networking Layers Regions contain multiple Availability zones. Most services operate inside AZ. Edge Location are small centers which are close to major populations. Used for edge computing and content delivery.\nLinks  AWS Global Infrastructure AWS Infrastructure  AWS Well-Architected Framework AWS Well-Architected Framework describe following key points:\n Security Reliablility Performance Efficiency Operational Excellence Cost Optimization  Elasticity Types of Scaling:\n Vertical (More CPU/Memory) Horizontal (More smaller instances) Elastic Number of instances automated in order to match load and capacity  "});index.add({'id':4,'href':'/aws-csa-associate/','title':"AWS Certified Solutions Architect – Associate",'content':"Intro This site contains notes from preparation to AWS Certified Solutions Architect – Associate. This is based on LinuxAcademy course which can be found here.\n"});index.add({'id':5,'href':'/aws-csa-associate/categories/','title':"Categories",'content':""});index.add({'id':6,'href':'/aws-csa-associate/docs/cfn/','title':"Cloud Formation",'content':"Cloud Formation Cloud formation template defines Cloud Formation stack. Stack creates, updates, deletes resources based on template\n Template an be written using JSON or YAML Template an contain up to 200 resources When Stack is deleted - all resources are deleted Stack can be updated with new version of template When logical resources added to templates new physical resources added to stack When logical resources deleted - physical are deleted When logical resources updated - physical can be updated or deleted (depends on resource)  Template elements  Version Description. Should go after version if defined Metadata Parameters Mappings Conditions Transforms Outputs Resources  "});index.add({'id':7,'href':'/aws-csa-associate/docs/','title':"Docs",'content':""});index.add({'id':8,'href':'/aws-csa-associate/docs/s3/','title':"S3 Simple Storage Service",'content':"Introduction to S3 S3 is a global object storage.\n Bucket name should be globally unique Bucket structure is flat Metadata can be attached to an object Object size can be from 0 bytes to 5 TB. S3 replicate data across the AZ S3 is not supposed to be attached as a volume Bucket Name length should be more then 3 and less then 63 characters. Name Must start from lowercase or number and can't be formatted as IP address Default 100 buckets per account. Hard limit is 1000 Bucket can contain unlimited number of objects Bucket total size is unlimited  Links S3 Same region replication\n"});index.add({'id':9,'href':'/aws-csa-associate/tags/','title':"Tags",'content':""});})();