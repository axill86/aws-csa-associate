<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on AWS Certified Solutions Architect – Associate</title><link>https://axill86.github.io/aws-csa-associate/docs/</link><description>Recent content in Docs on AWS Certified Solutions Architect – Associate</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://axill86.github.io/aws-csa-associate/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Identity and Access Management</title><link>https://axill86.github.io/aws-csa-associate/docs/iam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://axill86.github.io/aws-csa-associate/docs/iam/</guid><description>Identity and Access Management IAM Essentials IAM controls access to AWS services via policies, that can be attached to users, groups and roles.
ARN (Amazon Resource Name) Each resource at AWS has unique identifier named ARN (Amazon Resource Name), which has following format
arn:partition:service:region:account_id:[resource|resourecetype/resource|resourcetype/resource/qualifier|resourcetype/resource:qualifier|resourcetype:resource:qualifier] partition = aws or aws-cn service = AWS service (s3, ec2, rds, dynamodb) region = region code: us-east-1, us-west-2
AWS ARN documentation
Wildcards are supported arn:aws:s3:::my_corporate_bucket/*</description></item><item><title>Multi-Account Management and Organizations</title><link>https://axill86.github.io/aws-csa-associate/docs/multi-account/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://axill86.github.io/aws-csa-associate/docs/multi-account/</guid><description>Multi-Account Management and Organizations AWS Organizations AWS Organizations is a service for managing multiple consolidated accounts, which belongs to the same organization. It also allows to perform consolidated billing, when bills from all organizaiton collected into single account. Organization accounts can be grouped into organizational units.
graph TD; root[Root Account] ou[Organizational Unit] ou1[Organizational Unit] ou3[Organizational Unit] acc[Account] acc1[Account] acc2[Account] acc3[Account] root -- ou ou -- acc ou -- acc1 root -- ou1 ou1 -- acc2 ou1 -- acc3 ou1 -- ou3 Service Control Policies are used for limiting account usage.</description></item><item><title>Architecture 101</title><link>https://axill86.github.io/aws-csa-associate/docs/architecture101/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://axill86.github.io/aws-csa-associate/docs/architecture101/</guid><description>Architecture 101 Access Management Basics Principal a person or service that can make authenticated or anonymous request to perform an action on a system Authentication process of identification (with username/password, keys) Identity Objects which require authentication and are authorized to access resource Authorization Process of checking and allowing (or denying acces for identity) Shared responsibility model Customer Customer is responsible for security in the cloud
Customer data Platform, application, access management, encryption (at rest/in transit) OS, network, firewall configuration AWS AWS is responsible for security off the cloud</description></item><item><title>AWS Architecture 101</title><link>https://axill86.github.io/aws-csa-associate/docs/aws-architecture-101/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://axill86.github.io/aws-csa-associate/docs/aws-architecture-101/</guid><description>AWS Architecture 101 Accounts AWS accounts are independent by default Consolidated billing for multiple accounts can be set up AWS Physical and Networking Layers Regions contain multiple Availability zones. Most services operate inside AZ. Edge Location are small centers which are close to major populations. Used for edge computing and content delivery.
Links AWS Global Infrastructure AWS Infrastructure AWS Well-Architected Framework AWS Well-Architected Framework describe following key points:</description></item><item><title>Cloud Formation</title><link>https://axill86.github.io/aws-csa-associate/docs/cfn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://axill86.github.io/aws-csa-associate/docs/cfn/</guid><description>Cloud Formation Cloud formation template defines Cloud Formation stack. Stack creates, updates, deletes resources based on template
Template an be written using JSON or YAML Template an contain up to 200 resources When Stack is deleted - all resources are deleted Stack can be updated with new version of template When logical resources added to templates new physical resources added to stack When logical resources deleted - physical are deleted When logical resources updated - physical can be updated or deleted (depends on resource) Template elements Version Description.</description></item><item><title>S3 Simple Storage Service</title><link>https://axill86.github.io/aws-csa-associate/docs/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://axill86.github.io/aws-csa-associate/docs/s3/</guid><description>Introduction to S3 S3 is a global object storage.
Bucket name should be globally unique Bucket structure is flat Metadata can be attached to an object Object size can be from 0 bytes to 5 TB. S3 replicate data across the AZ S3 is not supposed to be attached as a volume Bucket Name length should be more then 3 and less then 63 characters. Name Must start from lowercase or number and can't be formatted as IP address Default 100 buckets per account.</description></item></channel></rss>